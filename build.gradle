plugins {
	id 'java'
	id 'jacoco'
	id 'signing'
	id 'maven-publish'
	id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
}

group = 'io.github.brantunger'
archivesBaseName = 'unruly-engine'
version = '1.0.3'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from(components['java'])

			pom {
				name.set('unruly-engine')
				description.set('Unruly is a pure Java rule engine that parses and evaluates using MVEL based rules')
				url.set('https://github.com/brantunger/unruly-engine')
				licenses {
					license {
						name.set('GNU GENERAL PUBLIC LICENSE v3.0')
						url.set('https://www.gnu.org/licenses/gpl-3.0.en.html')
					}
				}
				developers {
					developer {
						id.set('brantunger')
						name.set('Brant Unger')
						email.set('brantunger@gmail.com')
					}
				}
				scm {
					connection.set('scm:git:git://github.com/brantunger/unruly-engine.git')
					developerConnection.set('scm:git:ssh://github.com/brantunger/unruly-engine.git')
					url.set('https://github.com/brantunger/unruly-engine')
				}
			}
		}
	}
}

nexusPublishing {
	repositories {
		sonatype {
			nexusUrl.set(uri('https://s01.oss.sonatype.org/service/local/'))
			snapshotRepositoryUrl.set(uri('https://s01.oss.sonatype.org/content/repositories/snapshots/'))
			username.set(System.getenv('MAVEN_USERNAME'))
			password.set(System.getenv('MAVEN_PASSWORD'))
		}
	}
}

signing {
	def key = System.getenv('GPG_KEY')
	def pass = System.getenv('GPG_PASSWORD')
	useInMemoryPgpKeys(key, pass)
	sign publishing.publications.mavenJava
}

dependencies {
	implementation 'org.mvel:mvel2:2.4.15.Final'
	implementation 'org.slf4j:slf4j-api:2.0.7'

	compileOnly 'org.projectlombok:lombok:1.18.26'

	annotationProcessor 'org.projectlombok:lombok:1.18.26'
}

test {
	useJUnitPlatform {
		includeEngines 'junit-jupiter'
	}
	systemProperties = [
			'junit.jupiter.extensions.autodetection.enabled': 'true',
	]
	jacoco {
		destinationFile = file("$buildDir/jacoco/test.exec")
	}
}

ext {
	jacocoDestinationFile = "$buildDir/jacoco/test.exec"
}

jacocoTestReport {
	reports {
		html.enabled true
		xml.enabled true
		xml.destination file("${buildDir}/reports/jacoco/report.xml")
	}
}
